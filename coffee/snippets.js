// Generated by CoffeeScript 1.3.1
(function() {
  var addLink, editorCount, editors, encodeString, getSnippetFiles, getSnippetLinks, registerDeleteLinkListeners, registerFileNameListeners, saveSnippet, setupEditors, updateSyntaxHighlighting;

  editorCount = 0;

  editors = [];

  getSnippetLinks = function() {
    var links, numLinks;
    numLinks = jQuery("ul#links>li").size();
    links = "[";
    if (numLinks > 0) {
      jQuery("ul#links>li>a.link").each(function() {
        return links = "" + links + " " + (encodeString(jQuery(this).text()));
      });
      links = links.substring(0, links.length - 2);
    }
    links = "" + links + "]";
    return links;
  };

  encodeString = function(str) {
    var encodedString, patt, patt2;
    patt = /\n/g;
    encodedString = str.replace(patt, "<br/>");
    encodedString = escape(str);
    patt2 = /\+/g;
    encodedString = encodedString.replace(patt2, '%2B');
    return encodedString;
  };

  getSnippetFiles = function() {
    var files;
    files = "[";
    jQuery(".snippet-file").each(function() {
      var curEditor, fileContents, filename;
      curEditor = editors[parseInt(jQuery(this).children('.editornumber').val())];
      fileContents = encodeString(curEditor.getSession().getValue());
      filename = encodeString(jQuery(this).children(".file-name").val());
      return files = "" + files + " {\"filename\": \"" + filename + "\", \"filecontent\": \"" + fileContents + "\"}, ";
    });
    files = files.substring(0, files.length - 2);
    return files = "" + files + "]";
  };

  updateSyntaxHighlighting = function(fileType, editorNumber) {
    var CMode, CSMode, CSSMode, CoffeeMode, HTMLMode, JSONMode, JavaMode, JavaScriptMode, LessMode, PHPMode, PerlMode, PythonMode, RubyMode, SCSSMode, SQLMode, ScriptMode, XMLMode, editor;
    editor = editors[parseInt(editorNumber)];
    switch (fileType) {
      case ".c":
      case ".cpp":
        CMode = require("ace/mode/c_cpp").Mode;
        return editor.getSession().setMode(new CMode());
      case ".coffee":
        CoffeeMode = require("ace/mode/coffee").Mode;
        return editor.getSession().setMode(new CoffeeMode());
      case ".cs":
        CSMode = require("ace/mode/csharp").Mode;
        return editor.getSession().setMode(new CSMode());
      case ".css":
        CSSMode = require("ace/mode/css").Mode;
        return editor.getSession().setMode(new CSSMode());
      case ".html":
      case ".htm":
        HTMLMode = require("ace/mode/html").Mode;
        return editor.getSession().setMode(new HTMLMode());
      case ".java":
        JavaMode = require("ace/mode/java").Mode;
        return editor.getSession().setMode(new JavaMode());
      case ".js":
        JavaScriptMode = require("ace/mode/javascript").Mode;
        return editor.getSession().setMode(new JavaScriptMode());
      case ".json":
        JSONMode = require("ace/mode/json").Mode;
        return editor.getSession().setMode(new JSONMode());
      case ".less":
        LessMode = require("ace/mode/less").Mode;
        return editor.getSession().setMode(new LessMode());
      case ".pl":
        PerlMode = require("ace/mode/perl").Mode;
        return editor.getSession().setMode(new PerlMode());
      case ".php":
        PHPMode = require("ace/mode/php").Mode;
        return editor.getSession().setMode(new PHPMode());
      case ".py":
        PythonMode = require("ace/mode/python").Mode;
        return editor.getSession().setMode(new PythonMode());
      case ".rb":
        RubyMode = require("ace/mode/ruby").Mode;
        return editor.getSession().setMode(new RubyMode());
      case ".scss":
        SCSSMode = require("ace/mode/scss").Mode;
        return editor.getSession().setMode(new SCSSMode());
      case ".htaccess":
      case ".sh":
        ScriptMode = require("ace/mode/sh").Mode;
        return editor.getSession().setMode(new ScriptMode());
      case ".psgl":
      case ".sql":
        SQLMode = require("ace/mode/sql").Mode;
        return editor.getSession().setMode(new SQLMode());
      case ".xml":
        XMLMode = require("ace/mode/xml").Mode;
        return editor.getSession().setMode(new XMLMode());
    }
  };

  registerDeleteLinkListeners = function() {
    return jQuery("a.delete-link").click(function() {
      jQuery(this).parents("li").remove();
      return false;
    });
  };

  registerFileNameListeners = function() {
    return jQuery(".file-name").each(function() {
      return jQuery(this).blur(function() {
        var editorNumber, fileType, filename;
        filename = jQuery(this).val();
        if (filename.indexOf(".") !== -1) {
          fileType = filename.substring(filename.lastIndexOf("."));
          editorNumber = jQuery(this).siblings(".editornumber").val();
          return updateSyntaxHighlighting(fileType, editorNumber);
        }
      });
    });
  };

  saveSnippet = function() {
    var dateCreated, description, files, lastModified, links, snippet, title, views;
    if (jQuery("#title").val().trim() !== "") {
      title = encodeString(jQuery("#title").val());
      description = encodeString(jQuery("#description").val());
      links = getSnippetLinks();
      files = getSnippetFiles();
      views = jQuery("#views").val();
      dateCreated = jQuery("#dateCreated").val();
      lastModified = jQuery("#lastModified").val();
      snippet = "{\"title\": \"" + title + "\", \"description\": \"" + description + "\", \"files\": " + files + ", \"links\": " + links + ", \"date_created\": \"" + dateCreated + "\", \"last_modified\": \"" + lastModified + "\", \"views\": " + views + "}";
      jQuery("#snippet").val(snippet);
      jQuery("#snippet-form").submit();
    } else {
      jQuery("#validation-error").show();
    }
    return false;
  };

  addLink = function() {
    var linkHTML, match, newLink, regex;
    newLink = jQuery("#link").val().trim();
    if (newLink !== "") {
      regex = /https?:\/\//;
      match = regex.exec(newLink);
      if (!match) {
        newLink = "http://" + newLink;
      }
      linkHTML = '<li><a class="link" href="' + newLink + '" target="blank" title="Opens in new tab">' + newLink + '</a> <a href="#" class="delete-link">(delete)</a></li>';
      jQuery("#links").append(linkHTML);
      jQuery("#link").val('');
    }
    return registerDeleteLinkListeners();
  };

  setupEditors = function() {
    return jQuery(".aceeditor").each(function() {
      var editor, editorID, editorNumber, fileType, filename;
      editorID = jQuery(this).attr("id");
      editor = ace.edit(editorID);
      editor.setTheme("ace/theme/solarized_dark");
      editors.push(editor);
      filename = jQuery(this).siblings(".file-name").val();
      if (filename.indexOf(".") !== -1) {
        fileType = filename.substring(filename.lastIndexOf("."));
        editorNumber = jQuery(this).siblings(".editornumber").val();
        updateSyntaxHighlighting(fileType, editorNumber);
      }
      return editorCount++;
    });
  };

  jQuery(document).ready(function() {
    setupEditors();
    jQuery("#add-new-file").click(function() {
      var TextMode, editor, editorID, newHTML;
      newHTML = '<div class="snippet-file"><input type="hidden" class="editornumber" value="' + editorCount + '"/><input type="text" class="span3 file-name" placeholder="readme.txt"><div class="aceeditor" id="editor' + editorCount + '"></div></div>';
      jQuery("#snippet-list").append(newHTML);
      editorID = "editor" + editorCount;
      editor = ace.edit(editorID);
      editor.setTheme("ace/theme/solarized_dark");
      TextMode = require("ace/mode/text").Mode;
      editor.getSession().setMode(new TextMode());
      editors.push(editor);
      registerFileNameListeners();
      editorCount++;
      return false;
    });
    jQuery("#add-new-link").click(addLink);
    jQuery('#link').keydown(function(event) {
      if (event.which === 13) {
        event.preventDefault();
        return addLink();
      }
    });
    jQuery("#save").click(saveSnippet);
    jQuery("#delete").click(function() {
      if (confirm("Sure?")) {
        return jQuery("#delete-form").submit();
      }
    });
    registerDeleteLinkListeners();
    return registerFileNameListeners();
  });

}).call(this);
